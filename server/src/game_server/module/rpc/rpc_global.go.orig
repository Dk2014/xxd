package rpc

import (
	"core/fail"
	"core/log"
	"game_server/api/protocol/multi_level_api"
	"game_server/global"
	"game_server/mdb"
	"game_server/module"
	. "game_server/rpc"
	"sync"
	"time"
)

var playerInfoSets *globalPlayerInfoSets = &globalPlayerInfoSets{}

func init() {
	playerInfoSets.reset()
}

/*

 获取多人关卡在线好友

*/
type Args_GetFriendsWithMultiLevel struct {
	RPCArgTag
	PlayerId int64
}

type Reply_GetFriendsWithMultiLevel struct {
	OnlineFriends *multi_level_api.GetOnlineFriend_Out
}

func (this *RemoteServe) GetFriendsWithMultiLevel(args *Args_GetFriendsWithMultiLevel, reply *Reply_GetFriendsWithMultiLevel) error {
	return Remote.Serve(mdb.RPC_Remote_GetFriendsWithMultiLevel, args, mdb.TRANS_TAG_RPC_Serve_GetFriendsWithMultiLevel, func() error {
		mdb.GlobalExecute(func(globalDB *mdb.Database) {
			globalDB.AgentExecute(args.PlayerId, func(db *mdb.Database) {
				reply.OnlineFriends = module.Friend.GetMultiLevelOnlineFriends(db).(*multi_level_api.GetOnlineFriend_Out)
			})
		})
		return nil
	})
}

func RemoteGetFriendsWithMultiLevel(playerId int64, callback func(*multi_level_api.GetOnlineFriend_Out)) {
	reply := new(Reply_GetFriendsWithMultiLevel)
	args := &Args_GetFriendsWithMultiLevel{
		PlayerId: playerId,
	}

	Remote.Call(GlobalServerId, mdb.RPC_Remote_GetFriendsWithMultiLevel, args, reply, mdb.TRANS_TAG_RPC_Call_GetFriendsWithMultiLevel, func(err error) {
		fail.When(err != nil, err)
		callback(reply.OnlineFriends)
	})
}

/*

 获取互动服上记录的vip总人数

*/
type Args_GetGlobalVipCount struct {
	RPCArgTag
}

type Reply_GetGlobalVipCount struct {
	VIPCount int64
}

func (this *RemoteServe) GetGlobalVipCount(args *Args_GetGlobalVipCount, reply *Reply_GetGlobalVipCount) error {
	return Remote.Serve(mdb.RPC_Remote_GetGlobalVipCount, args, mdb.TRANS_TAG_RPC_Serve_GetGlobalVipCount, func() error {
		reply.VIPCount = int64(global.GetPlayerVIPTotal())
		return nil
	})
}

func RemoteGetGlobalVipCount(callback func(int64)) {
	reply := new(Reply_GetGlobalVipCount)
	args := &Args_GetGlobalVipCount{}
	Remote.Call(GlobalServerId, mdb.RPC_Remote_GetGlobalVipCount, args, reply, mdb.TRANS_TAG_RPC_Call_GetGlobalVipCount, func(err error) {
		callback(reply.VIPCount)
	})
}

/*

 获取互动服上记录的各级vip总数信息

*/
type Args_GetGlobalLevelVipCount struct {
	RPCArgTag
}

type Reply_GetGlobalLevelVipCount struct {
	LevelCount []int32
}

func (this *RemoteServe) GetGlobalLevelVipCount(args *Args_GetGlobalLevelVipCount, reply *Reply_GetGlobalLevelVipCount) error {
	return Remote.Serve(mdb.RPC_Remote_GetGlobalLevelVipCount, args, mdb.TRANS_TAG_RPC_Serve_GetGlobalLevelVipCount, func() error {
		reply.LevelCount = global.GetPlayerVIP()
		return nil
	})
}

func RemoteGetGlobalLevelVipCount(callback func([]int32)) {
	reply := new(Reply_GetGlobalLevelVipCount)
	args := &Args_GetGlobalLevelVipCount{}
	Remote.Call(GlobalServerId, mdb.RPC_Remote_GetGlobalLevelVipCount, args, reply, mdb.TRANS_TAG_RPC_Call_GetGlobalLevelVipCount, func(err error) {
		callback(reply.LevelCount)
	})
}

/*

 添加互动服上记录的团购总人数

*/
type Args_OperateGroupBuyCount struct {
	RPCArgTag
	IsAdd bool
}

type Reply_OperateGroupBuyCount struct {
	GroupBuyCount int32
}

func (this *RemoteServe) OperateGroupBuyCount(args *Args_OperateGroupBuyCount, reply *Reply_OperateGroupBuyCount) error {
	return Remote.Serve(mdb.RPC_Remote_OperateGroupBuyCount, args, mdb.TRANS_TAG_RPC_Serve_OperateGroupBuyCount, func() error {
		reply.GroupBuyCount = int32(global.OperateGroupBuyCount(args.IsAdd))
		return nil
	})
}

func RemoteOperateGroupBuyCount(isAdd bool, callback func(int32)) {
	reply := new(Reply_OperateGroupBuyCount)
	args := &Args_OperateGroupBuyCount{IsAdd: isAdd}
	Remote.Call(GlobalServerId, mdb.RPC_Remote_OperateGroupBuyCount, args, reply, mdb.TRANS_TAG_RPC_Call_OperateGroupBuyCount, func(err error) {
		callback(reply.GroupBuyCount)
	})
}

/*

	向互动服务器定期更新玩家数据

*/
type Args_SetPlayerInfoWithInt64 struct {
	RPCArgTag
	Sets map[int64]map[int]int64
}

type Reply_SetPlayerInfoWithInt64 struct {
}

// remote method
func (this *RemoteServe) SetPlayerInfo(args *Args_SetPlayerInfoWithInt64, reply *Reply_SetPlayerInfoWithInt64) error {
	return Remote.Serve(mdb.RPC_Remote_SetPlayerInfo, args, mdb.TRANS_TAG_RPC_Serve_SetPlayerInfo, func() error {
		global.UpdatePlayerInfoSets(args.Sets)
		return nil
	})
}

// local method
func RemoteUpdatePlayerArenaTrendWin(playerId int64, value int16) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_ARENA_TREND_WIN, int64(value))
}

func RemoteUpdatePlayerFightNum(playerId int64, value int32) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_FIGHT_NUM, int64(value))
}

func RemoteUpdateMainRoleLevel(playerId int64, value int16) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_ROLE_LEVEL, int64(value))
}

func RemoteUpdatePlayerLoginTime(playerId int64, value int64) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_LOGIN_TIME, value)
}

func RemoteUpdatePlayerOfflineTime(playerId int64, value int64) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_OFFLINE_TIME, value)
}

func RemoteUpdatePlayerMultiLevelInfo(playerId int64, lock int32, dailyNum int8) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_MULTI_LEVEL_LOCK, int64(lock))
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_MULTI_DAILY_NUM, int64(dailyNum))
}

func RemoteUpdatePlayerPushNotificationOptions(playerId int64, options int64) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_PUSH_NOTIFICATION_OPTION, options)
}

func RemoteUpdatePlayerVIPLevel(playerId int64, value int64) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_VIP_LEVEL, value)
}

func RemoteUpdatePlayerFashion(playerId int64, value int64) {
	safeAddSet(playerId, global.PLAYER_INFO_TYPE_FASHION, value)
}

// 定时更新玩家数据集合到互动服务器
type globalPlayerInfoSets struct {
	sync.Mutex
	callTimer *time.Timer
	sets      map[int64]map[int]int64 // map[playerId]map[valueType]value
}

func safeAddSet(playerId int64, valueType int, value int64) {
	go func() {
		defer func() {
			if err := recover(); err != nil {
				log.Errorf("safeAddSet type:%d, value:%d  %v ", valueType, value, err)
			}
		}()

		playerInfoSets.AddSet(playerId, valueType, value)
	}()
}

func (this *globalPlayerInfoSets) AddSet(playerId int64, valueType int, value int64) {
	this.Lock()
	defer this.Unlock()

	if _, ok := this.sets[playerId]; !ok {
		this.sets[playerId] = make(map[int]int64)
	}

	this.sets[playerId][valueType] = value
}

func (this *globalPlayerInfoSets) callUpdatePlayerInfoSets() {
	defer func() {
		if err := recover(); err != nil {
			log.Errorf("callUpdatePlayerInfoSets error", err)
		}
	}()

	this.Lock()
	defer this.Unlock()

	if len(this.sets) > 0 {
		reply := new(Reply_SetPlayerInfoWithInt64)
		args := &Args_SetPlayerInfoWithInt64{Sets: this.sets}
		Remote.Call(GlobalServerId, mdb.RPC_Remote_SetPlayerInfo, args, reply, mdb.TRANS_TAG_RPC_Call_SetPlayerInfo, nil)
	}
	this.reset()
}

func (this *globalPlayerInfoSets) reset() {
	this.sets = make(map[int64]map[int]int64)
	this.callTimer = time.AfterFunc(5*time.Second, this.callUpdatePlayerInfoSets)
}
