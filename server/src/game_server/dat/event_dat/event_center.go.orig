package event_dat

import (
	"core/fail"
	"core/mysql"
	"core/time"
	. "game_server/config"
	"game_server/dat/mail_dat"
)

var (
	mapEventCenter map[int16]*EventCenter
)

type EventCenter struct {
	Id          int16  //
	Relative    int16  // 关联的活动
	Start       int64  // 活动开始时间戳
	End         int64  // 活动结束时间戳
	Dispose     int64  // 活动销毁时间戳
	IsRelative  int8   //是否为相对时间戳
	IsGo        int8   // 是否前往
	IsMail      int8   // 活动结束是否补发奖励
	MailTitle   string // 补发奖励邮件标题
	MailContent string // 补发奖励邮件内容,{val}对应权值
}

func loadEventCenter(db *mysql.Connection) {
	res, err := db.ExecuteFetch([]byte("SELECT * FROM quest_activity_center ORDER BY `weight` ASC"), -1)
	if err != nil {
		panic(err)
	}

	iId := res.Map("id")
	iRelative := res.Map("relative")
	iStart := res.Map("start")
	iEnd := res.Map("end")
	iDispose := res.Map("dispose")
	iIsGo := res.Map("is_go")
	iIsRelative := res.Map("is_relative")
	iIsMail := res.Map("is_mail")
	iMailTitle := res.Map("mail_title")
	iMailContent := res.Map("mail_content")

	var pri_id int16
	mapEventCenter = map[int16]*EventCenter{}
	for _, row := range res.Rows {
		pri_id = row.Int16(iId)
		mapEventCenter[pri_id] = &EventCenter{
			Id:          pri_id,
			Relative:    row.Int16(iRelative),
			Start:       row.Int64(iStart),
			End:         row.Int64(iEnd),
			Dispose:     row.Int64(iDispose),
			IsRelative:  row.Int8(iIsRelative),
			IsGo:        row.Int8(iIsGo),
			IsMail:      row.Int8(iIsMail),
			MailTitle:   row.Str(iMailTitle),
			MailContent: row.Str(iMailContent),
		}
	}
}

// ############### 对外接口实现 coding here ###############
func LoadEventCenterExt(start, end, dispose int64, typeId int16, isRelative int8) {
	if event, ok := mapEventCenter[typeId]; ok {
		if start > -1 {
			event.Start = start
		}
		if end > -1 {
			event.End = end
		}
		if dispose > -1 {
			event.Dispose = dispose
		}
		if isRelative > -1 {
			event.IsRelative = isRelative
		}
	} else {
		fail.When(true, "wrong event type")
	}
}

func GetEventsInfo() map[int16]*EventCenter {
	return mapEventCenter
}

func GetEventInfoById(eventId int16) (event *EventCenter, ok bool) {
	event, ok = mapEventCenter[eventId]
	return
}

//验证活动操作是否还在活动有效期范围内 （分两种，活动进行期，活动存在期）
func CheckEventTime(eventInfo *EventCenter, checkType int) bool {
	dt := int64(0)
	if eventInfo.IsRelative == 1 { //是相对时间
		dt = ServerCfg.ServerOpenTime
	}
	now := time.GetNowTime()
	if eventInfo.Start+dt > now {
		return false //活动还没开始的状况
	}
	if checkType == 0 { //领取奖励时验证是否过期
		if eventInfo.Dispose+dt > 0 && now >= eventInfo.Dispose+dt {
			return false
		}
	} else if checkType == 1 { //获取活动时验证是否结束
		if eventInfo.End+dt > 0 && now >= eventInfo.End+dt {
			return false
		}
	}
	return true
}

////验证活动操作是否还在活动有效期范围内 （分两种，活动进行期，活动存在期）
//func VaildEvent(eventId int16, kind int8) bool {
//	eventInfo, ok := mapEventCenter[eventId]
//	fail.When(!ok, "wrong event ID")
//	result := true
//	now := time.GetNowTime()
//	if eventInfo.Start > 0 && eventInfo.Start > now {
//		result = false //活动还没开始的状况
//	}
//	if kind == 0 { //领取奖励时验证是否过期
//		if eventInfo.Dispose > 0 && now >= eventInfo.Dispose {
//			result = false
//		}
//	} else if kind == 1 { //获取活动时验证是否结束
//		if eventInfo.End > 0 && now >= eventInfo.End {
//			result = false
//		}
//	}
//	return result
//}

//过期活动需要补发邮件的，补发奖励邮件给玩家
func AwardMailAttachments(eventId int16, awarded, maxAward int32) (attachments map[int32][]*mail_dat.Attachment) {
	//TODO 添加判断逻辑
	return
}
